def outdir = "quicksand_${manifest.version}"

process {

    //
    // Workflow: Splitbam
    //

    if(params.bam){
        withName: "SPLITBAM" {
            publishDir = [
                path:"split",
                mode:"copy",
                pattern:"*.{bam,txt}"
            ]
        }
    }
    withName: "ESTIMATE_CC" {
        publishDir = [
            path:"${outdir}",
            mode:"copy",
            pattern:"*.{txt}" ]
    }

    //
    // Workflow: Bamfilter
    //
    //
    // remove the paired information after filtering.
    // IF people dont merge their reads, that causes downstream problems, so this is necessary.

    withName: "SAMTOOLS_FILTER" {
        ext.args = "-F ${params.bamfilterflag} --remove-flags 1"
    }

    withName: "BAM_LENGTHFILTER" {
        ext.args = "-c ${params.bamfilter_length_cutoff} -l ${params.compression_level}"
    }

    //
    // Workflow: Krakenrun
    //

    withName: "RUN_KRAKENUNIQ" {
        publishDir = [
            path: "${outdir}/stats",
            mode: "copy",
            pattern:"*.{translate,report}"
        ]
    }

    withName: "PARSE_KRAKEN_REPORT"{
        ext.args = "${params.krakenuniq_min_kmers} ${params.krakenuniq_min_reads}"
        publishDir = [
            path: "${outdir}/stats",
            mode: "copy",
            saveAs: {"${meta.id}.krakenUniq.parsed_report.tsv" },
            pattern: "*.tsv",
        ]
    }

    withName: "EXTRACT_TAXON" {
        ext.args = "-l ${params.compression_level}"
    }

    //
    // Workflow: Bamextract
    //
    if (! params.rerun){
        withName: "bamextract:SAMTOOLS_SORT" {
            publishDir = [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/1-extracted/${meta.id}_extractedReads-${meta.Taxon}.bam" },
                pattern: "sorted_*.bam",
            ]
            ext.args = "-n -l ${params.compression_level}"
        }
    }

    //
    // Workflow: mapbwa
    //

    withName: "MAP_BWA" {
        publishDir = [
            path: "${outdir}/out",
            mode: "copy",
            saveAs: { "${meta.Taxon}/${meta.Reference}/2-aligned/${meta.id}.${meta.Family}.${meta.Species}.bam" },
            pattern: "mapped_*.bam",
        ]
        ext.args = "-n 0.01 -o 2 -l 16500"
    }

    withName: "mapbam:SAMTOOLS_FILTER" {
        ext.args = "-q ${params.mapbwa_quality_cutoff}"
    }

    //
    // workflow dedupbam
    //

    withName:"BAM_RMDUP" {
        publishDir = [
            path: "${outdir}/out",
            mode: "copy",
            saveAs: { "${meta.Taxon}/${meta.Reference}/3-deduped/${meta.id}.${meta.Family}.${meta.Species}_deduped.bam" },
            pattern: "deduped_*.bam",
        ]
        ext.args = "-r"
    }

    //
    // workflow bedfilterbam
    //

    withName:"BEDTOOLS_INTERSECT" {
        publishDir = [
            path: "${outdir}/out",
            mode: "copy",
            saveAs: { "${meta.Taxon}/${meta.Reference}/4-bedfiltered/${meta.id}.${meta.Family}.${meta.Species}_deduped_bedfiltered.bam" },
            pattern: "*.bam",
        ]
    }

    //
    // Deamination
    //

    withName:"BAM_DEAM_BEST" {
        ext.args = "only_stats ${params.doublestranded ? 'doublestranded' : ''}"
    }

    withName:"BAM_DEAM_FIXED" {
        publishDir = [
            [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/${meta.Reference}/5-deaminated/${meta.id}.${meta.Family}.${meta.Species}_deduped_deaminated_1term.bam" },
                pattern: "*1.bam",
            ],
            [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/${meta.Reference}/5-deaminated/${meta.id}.${meta.Family}.${meta.Species}_deduped_deaminated_3term.bam" },
                pattern: "*3.bam",
            ]
        ]
       ext.args = "${params.doublestranded ? 'doublestranded' : ''}"
    }

    withName:"SAMTOOLS_MPILEUP" {
        ext.args = "--output-BP-5 --no-output-ends --no-output-ins --no-output-del --no-output-ins --no-output-del --min-BQ 0  -R --ff 0"
        publishDir = [
            [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/${meta.Reference}/6-mpileups/${meta.id}.${meta.Family}.${meta.Species}_all_mpiled.tsv" },
                pattern: "all.tsv"
            ],
            [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/${meta.Reference}/6-mpileups/${meta.RG}.${meta.Family}.${meta.Species}_term1_mpiled.tsv" },
                pattern: "term1.tsv"
            ],
            [
                path: "${outdir}/out",
                mode: "copy",
                saveAs: { "${meta.Taxon}/${meta.Reference}/6-mpileups/${meta.RG}.${meta.Family}.${meta.Species}_term3_mpiled.tsv" },
                pattern: "term3.tsv"
            ]
        ]
    }
}

