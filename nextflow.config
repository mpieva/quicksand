/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  mpieva/quicksand Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Default config options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/


manifest {
    name             = 'mpieva/quicksand'
    author           = 'Merlin Szymanski'
    homePage         = 'https://mpieva.github.io/quicksand/'
    description      = 'quick analysis of sedimentary ancient DNA'
    nextflowVersion  = '>=20.04'
    version          = 'v1.4'
}

trace {
    enabled          = true
    file             = 'reports/trace.tsv'
}

timeline {
    enabled          = true
    file             = 'reports/timeline.html'
}

report {
    enabled          = true
    file             = 'reports/report.html'
}

executor {
    name             = 'sge'
    queueSize        = 250
    pollInterval     = '30 sec'
}

// Include Base config
includeConfig 'conf/base.config'

//include the params
includeConfig 'conf/params.config'


profiles {
    conda {
        docker.enabled         = false
        singularity.enabled    = false
        params.enable_conda    = true
    }
    docker {
        docker.enabled         = true
        singularity.enabled    = false
    }    
    singularity {
        docker.enabled         = false
        singularity.enabled    = true
        singularity.autoMounts = true
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// taken from nf-core/eager (@jfy133)

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
